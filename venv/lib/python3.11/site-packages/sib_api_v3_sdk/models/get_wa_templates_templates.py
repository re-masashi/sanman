# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetWATemplatesTemplates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'status': 'str',
        'language': 'str',
        'category': 'str',
        'error_reason': 'str',
        'created_at': 'str',
        'modified_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'language': 'language',
        'category': 'category',
        'error_reason': 'errorReason',
        'created_at': 'createdAt',
        'modified_at': 'modifiedAt'
    }

    def __init__(self, id=None, name=None, status=None, language=None, category=None, error_reason=None, created_at=None, modified_at=None):  # noqa: E501
        """GetWATemplatesTemplates - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._status = None
        self._language = None
        self._category = None
        self._error_reason = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.status = status
        self.language = language
        self.category = category
        if error_reason is not None:
            self.error_reason = error_reason
        self.created_at = created_at
        self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this GetWATemplatesTemplates.  # noqa: E501

        id of the template  # noqa: E501

        :return: The id of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetWATemplatesTemplates.

        id of the template  # noqa: E501

        :param id: The id of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetWATemplatesTemplates.  # noqa: E501

        Name of the Whatsapp template  # noqa: E501

        :return: The name of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetWATemplatesTemplates.

        Name of the Whatsapp template  # noqa: E501

        :param name: The name of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this GetWATemplatesTemplates.  # noqa: E501

        Status of the Whatsapp template  # noqa: E501

        :return: The status of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetWATemplatesTemplates.

        Status of the Whatsapp template  # noqa: E501

        :param status: The status of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def language(self):
        """Gets the language of this GetWATemplatesTemplates.  # noqa: E501

        Language in which template exists  # noqa: E501

        :return: The language of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GetWATemplatesTemplates.

        Language in which template exists  # noqa: E501

        :param language: The language of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def category(self):
        """Gets the category of this GetWATemplatesTemplates.  # noqa: E501

        category of the template  # noqa: E501

        :return: The category of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this GetWATemplatesTemplates.

        category of the template  # noqa: E501

        :param category: The category of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def error_reason(self):
        """Gets the error_reason of this GetWATemplatesTemplates.  # noqa: E501

        Error reason in the template creation  # noqa: E501

        :return: The error_reason of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._error_reason

    @error_reason.setter
    def error_reason(self, error_reason):
        """Sets the error_reason of this GetWATemplatesTemplates.

        Error reason in the template creation  # noqa: E501

        :param error_reason: The error_reason of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """

        self._error_reason = error_reason

    @property
    def created_at(self):
        """Gets the created_at of this GetWATemplatesTemplates.  # noqa: E501

        Creation UTC date-time of the whatsapp template (YYYY-MM-DDTHH:mm:ss.SSSZ)  # noqa: E501

        :return: The created_at of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetWATemplatesTemplates.

        Creation UTC date-time of the whatsapp template (YYYY-MM-DDTHH:mm:ss.SSSZ)  # noqa: E501

        :param created_at: The created_at of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this GetWATemplatesTemplates.  # noqa: E501

        UTC date-time of last modification of the whatsapp template (YYYY-MM-DDTHH:mm:ss.SSSZ)  # noqa: E501

        :return: The modified_at of this GetWATemplatesTemplates.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this GetWATemplatesTemplates.

        UTC date-time of last modification of the whatsapp template (YYYY-MM-DDTHH:mm:ss.SSSZ)  # noqa: E501

        :param modified_at: The modified_at of this GetWATemplatesTemplates.  # noqa: E501
        :type: str
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWATemplatesTemplates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWATemplatesTemplates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
