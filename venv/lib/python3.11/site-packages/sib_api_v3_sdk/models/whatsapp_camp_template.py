# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WhatsappCampTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category': 'str',
        'language': 'str',
        'contains_button': 'bool',
        'display_header': 'bool',
        'header_type': 'str',
        'components': 'list[ComponentItems]',
        'header_variables': 'list[VariablesItems]',
        'body_variables': 'list[VariablesItems]',
        'button_type': 'str',
        'hide_footer': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'category': 'category',
        'language': 'language',
        'contains_button': 'contains_button',
        'display_header': 'display_header',
        'header_type': 'header_type',
        'components': 'components',
        'header_variables': 'header_variables',
        'body_variables': 'body_variables',
        'button_type': 'button_type',
        'hide_footer': 'hide_footer'
    }

    def __init__(self, name=None, category=None, language=None, contains_button=None, display_header=None, header_type=None, components=None, header_variables=None, body_variables=None, button_type=None, hide_footer=None):  # noqa: E501
        """WhatsappCampTemplate - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._category = None
        self._language = None
        self._contains_button = None
        self._display_header = None
        self._header_type = None
        self._components = None
        self._header_variables = None
        self._body_variables = None
        self._button_type = None
        self._hide_footer = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if language is not None:
            self.language = language
        if contains_button is not None:
            self.contains_button = contains_button
        if display_header is not None:
            self.display_header = display_header
        if header_type is not None:
            self.header_type = header_type
        if components is not None:
            self.components = components
        if header_variables is not None:
            self.header_variables = header_variables
        if body_variables is not None:
            self.body_variables = body_variables
        if button_type is not None:
            self.button_type = button_type
        if hide_footer is not None:
            self.hide_footer = hide_footer

    @property
    def name(self):
        """Gets the name of this WhatsappCampTemplate.  # noqa: E501

        name of the template  # noqa: E501

        :return: The name of this WhatsappCampTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WhatsappCampTemplate.

        name of the template  # noqa: E501

        :param name: The name of this WhatsappCampTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this WhatsappCampTemplate.  # noqa: E501

        description of the template  # noqa: E501

        :return: The category of this WhatsappCampTemplate.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this WhatsappCampTemplate.

        description of the template  # noqa: E501

        :param category: The category of this WhatsappCampTemplate.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def language(self):
        """Gets the language of this WhatsappCampTemplate.  # noqa: E501

        language of the template  # noqa: E501

        :return: The language of this WhatsappCampTemplate.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this WhatsappCampTemplate.

        language of the template  # noqa: E501

        :param language: The language of this WhatsappCampTemplate.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def contains_button(self):
        """Gets the contains_button of this WhatsappCampTemplate.  # noqa: E501


        :return: The contains_button of this WhatsappCampTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._contains_button

    @contains_button.setter
    def contains_button(self, contains_button):
        """Sets the contains_button of this WhatsappCampTemplate.


        :param contains_button: The contains_button of this WhatsappCampTemplate.  # noqa: E501
        :type: bool
        """

        self._contains_button = contains_button

    @property
    def display_header(self):
        """Gets the display_header of this WhatsappCampTemplate.  # noqa: E501


        :return: The display_header of this WhatsappCampTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._display_header

    @display_header.setter
    def display_header(self, display_header):
        """Sets the display_header of this WhatsappCampTemplate.


        :param display_header: The display_header of this WhatsappCampTemplate.  # noqa: E501
        :type: bool
        """

        self._display_header = display_header

    @property
    def header_type(self):
        """Gets the header_type of this WhatsappCampTemplate.  # noqa: E501

        type of header  # noqa: E501

        :return: The header_type of this WhatsappCampTemplate.  # noqa: E501
        :rtype: str
        """
        return self._header_type

    @header_type.setter
    def header_type(self, header_type):
        """Sets the header_type of this WhatsappCampTemplate.

        type of header  # noqa: E501

        :param header_type: The header_type of this WhatsappCampTemplate.  # noqa: E501
        :type: str
        """

        self._header_type = header_type

    @property
    def components(self):
        """Gets the components of this WhatsappCampTemplate.  # noqa: E501

        array of component item objects  # noqa: E501

        :return: The components of this WhatsappCampTemplate.  # noqa: E501
        :rtype: list[ComponentItems]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this WhatsappCampTemplate.

        array of component item objects  # noqa: E501

        :param components: The components of this WhatsappCampTemplate.  # noqa: E501
        :type: list[ComponentItems]
        """

        self._components = components

    @property
    def header_variables(self):
        """Gets the header_variables of this WhatsappCampTemplate.  # noqa: E501

        array of variables item object  # noqa: E501

        :return: The header_variables of this WhatsappCampTemplate.  # noqa: E501
        :rtype: list[VariablesItems]
        """
        return self._header_variables

    @header_variables.setter
    def header_variables(self, header_variables):
        """Sets the header_variables of this WhatsappCampTemplate.

        array of variables item object  # noqa: E501

        :param header_variables: The header_variables of this WhatsappCampTemplate.  # noqa: E501
        :type: list[VariablesItems]
        """

        self._header_variables = header_variables

    @property
    def body_variables(self):
        """Gets the body_variables of this WhatsappCampTemplate.  # noqa: E501

        array of variables item variables  # noqa: E501

        :return: The body_variables of this WhatsappCampTemplate.  # noqa: E501
        :rtype: list[VariablesItems]
        """
        return self._body_variables

    @body_variables.setter
    def body_variables(self, body_variables):
        """Sets the body_variables of this WhatsappCampTemplate.

        array of variables item variables  # noqa: E501

        :param body_variables: The body_variables of this WhatsappCampTemplate.  # noqa: E501
        :type: list[VariablesItems]
        """

        self._body_variables = body_variables

    @property
    def button_type(self):
        """Gets the button_type of this WhatsappCampTemplate.  # noqa: E501


        :return: The button_type of this WhatsappCampTemplate.  # noqa: E501
        :rtype: str
        """
        return self._button_type

    @button_type.setter
    def button_type(self, button_type):
        """Sets the button_type of this WhatsappCampTemplate.


        :param button_type: The button_type of this WhatsappCampTemplate.  # noqa: E501
        :type: str
        """

        self._button_type = button_type

    @property
    def hide_footer(self):
        """Gets the hide_footer of this WhatsappCampTemplate.  # noqa: E501


        :return: The hide_footer of this WhatsappCampTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._hide_footer

    @hide_footer.setter
    def hide_footer(self, hide_footer):
        """Sets the hide_footer of this WhatsappCampTemplate.


        :param hide_footer: The hide_footer of this WhatsappCampTemplate.  # noqa: E501
        :type: bool
        """

        self._hide_footer = hide_footer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WhatsappCampTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WhatsappCampTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
