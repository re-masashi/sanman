# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'quantity': 'float',
        'variant_id': 'str',
        'price': 'float'
    }

    attribute_map = {
        'product_id': 'productId',
        'quantity': 'quantity',
        'variant_id': 'variantId',
        'price': 'price'
    }

    def __init__(self, product_id=None, quantity=None, variant_id=None, price=None):  # noqa: E501
        """OrderProducts - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._quantity = None
        self._variant_id = None
        self._price = None
        self.discriminator = None

        self.product_id = product_id
        self.quantity = quantity
        if variant_id is not None:
            self.variant_id = variant_id
        self.price = price

    @property
    def product_id(self):
        """Gets the product_id of this OrderProducts.  # noqa: E501

        ID of the product.  # noqa: E501

        :return: The product_id of this OrderProducts.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this OrderProducts.

        ID of the product.  # noqa: E501

        :param product_id: The product_id of this OrderProducts.  # noqa: E501
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this OrderProducts.  # noqa: E501

        How many pieces of the product the visitor has added to the cart.  # noqa: E501

        :return: The quantity of this OrderProducts.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderProducts.

        How many pieces of the product the visitor has added to the cart.  # noqa: E501

        :param quantity: The quantity of this OrderProducts.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def variant_id(self):
        """Gets the variant_id of this OrderProducts.  # noqa: E501

        Product ID of the red color shirts.  # noqa: E501

        :return: The variant_id of this OrderProducts.  # noqa: E501
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this OrderProducts.

        Product ID of the red color shirts.  # noqa: E501

        :param variant_id: The variant_id of this OrderProducts.  # noqa: E501
        :type: str
        """

        self._variant_id = variant_id

    @property
    def price(self):
        """Gets the price of this OrderProducts.  # noqa: E501

        The price of a unit of product  # noqa: E501

        :return: The price of this OrderProducts.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderProducts.

        The price of a unit of product  # noqa: E501

        :param price: The price of this OrderProducts.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
