# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetWhatsappEventReportEvents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_number': 'str',
        '_date': 'str',
        'message_id': 'str',
        'event': 'str',
        'reason': 'str',
        'body': 'str',
        'media_url': 'str',
        'sender_number': 'str'
    }

    attribute_map = {
        'contact_number': 'contactNumber',
        '_date': 'date',
        'message_id': 'messageId',
        'event': 'event',
        'reason': 'reason',
        'body': 'body',
        'media_url': 'mediaUrl',
        'sender_number': 'senderNumber'
    }

    def __init__(self, contact_number=None, _date=None, message_id=None, event=None, reason=None, body=None, media_url=None, sender_number=None):  # noqa: E501
        """GetWhatsappEventReportEvents - a model defined in Swagger"""  # noqa: E501

        self._contact_number = None
        self.__date = None
        self._message_id = None
        self._event = None
        self._reason = None
        self._body = None
        self._media_url = None
        self._sender_number = None
        self.discriminator = None

        self.contact_number = contact_number
        self._date = _date
        self.message_id = message_id
        self.event = event
        if reason is not None:
            self.reason = reason
        if body is not None:
            self.body = body
        if media_url is not None:
            self.media_url = media_url
        self.sender_number = sender_number

    @property
    def contact_number(self):
        """Gets the contact_number of this GetWhatsappEventReportEvents.  # noqa: E501

        WhatsApp Number with country code. Example, 85264318721  # noqa: E501

        :return: The contact_number of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this GetWhatsappEventReportEvents.

        WhatsApp Number with country code. Example, 85264318721  # noqa: E501

        :param contact_number: The contact_number of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """
        if contact_number is None:
            raise ValueError("Invalid value for `contact_number`, must not be `None`")  # noqa: E501

        self._contact_number = contact_number

    @property
    def _date(self):
        """Gets the _date of this GetWhatsappEventReportEvents.  # noqa: E501

        UTC date-time on which the event has been generated  # noqa: E501

        :return: The _date of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this GetWhatsappEventReportEvents.

        UTC date-time on which the event has been generated  # noqa: E501

        :param _date: The _date of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def message_id(self):
        """Gets the message_id of this GetWhatsappEventReportEvents.  # noqa: E501

        Message ID which generated the event  # noqa: E501

        :return: The message_id of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this GetWhatsappEventReportEvents.

        Message ID which generated the event  # noqa: E501

        :param message_id: The message_id of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")  # noqa: E501

        self._message_id = message_id

    @property
    def event(self):
        """Gets the event of this GetWhatsappEventReportEvents.  # noqa: E501

        Event which occurred  # noqa: E501

        :return: The event of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GetWhatsappEventReportEvents.

        Event which occurred  # noqa: E501

        :param event: The event of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501
        allowed_values = ["sent", "delivered", "read", "error", "unsubscribe", "reply", "soft-bounce"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def reason(self):
        """Gets the reason of this GetWhatsappEventReportEvents.  # noqa: E501

        Reason for the event (will be there in case of `error` and `soft-bounce` events)  # noqa: E501

        :return: The reason of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GetWhatsappEventReportEvents.

        Reason for the event (will be there in case of `error` and `soft-bounce` events)  # noqa: E501

        :param reason: The reason of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def body(self):
        """Gets the body of this GetWhatsappEventReportEvents.  # noqa: E501

        Text of the reply (will be there only in case of `reply` event with text)  # noqa: E501

        :return: The body of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GetWhatsappEventReportEvents.

        Text of the reply (will be there only in case of `reply` event with text)  # noqa: E501

        :param body: The body of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def media_url(self):
        """Gets the media_url of this GetWhatsappEventReportEvents.  # noqa: E501

        Url of the media reply (will be there only in case of `reply` event with media)  # noqa: E501

        :return: The media_url of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this GetWhatsappEventReportEvents.

        Url of the media reply (will be there only in case of `reply` event with media)  # noqa: E501

        :param media_url: The media_url of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """

        self._media_url = media_url

    @property
    def sender_number(self):
        """Gets the sender_number of this GetWhatsappEventReportEvents.  # noqa: E501

        WhatsApp Number with country code. Example, 85264318721  # noqa: E501

        :return: The sender_number of this GetWhatsappEventReportEvents.  # noqa: E501
        :rtype: str
        """
        return self._sender_number

    @sender_number.setter
    def sender_number(self, sender_number):
        """Sets the sender_number of this GetWhatsappEventReportEvents.

        WhatsApp Number with country code. Example, 85264318721  # noqa: E501

        :param sender_number: The sender_number of this GetWhatsappEventReportEvents.  # noqa: E501
        :type: str
        """
        if sender_number is None:
            raise ValueError("Invalid value for `sender_number`, must not be `None`")  # noqa: E501

        self._sender_number = sender_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWhatsappEventReportEvents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWhatsappEventReportEvents):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
